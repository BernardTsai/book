swagger: "2.0"
info:
  description: "Orchestrator API (mailto:bernard@tsai.eu)"
  version: "0.0.1"
  title: "Orchestrator"
  termsOfService: "http://tsai.eu"
  contact:
    email: "bernard@tsai.eu"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "tsai.eu"
tags:
- name: "orchestration"
  description: "Orchestration"
  externalDocs:
    description: "Orchestration (Lifecycle Automation)"
    url: "https://github.com/BernardTsai"
schemes:
- "http"
paths:
  /:
    post:
      summary: "Store model"
      description: "create model from yaml data and store it into the repository"
      operationId: "StoreModel"
      consumes:
      - "application/x-yaml"
      parameters:
      - in: "body"
        name: "model"
        description: "model data as yaml"
        required: true
        schema:
          $ref: "#/definitions/Model"
      responses:
        200:
          description: "Success"
    get:
      summary: "Retrieve model"
      description: "retrieve model from the repository as yaml data"
      operationId: "RetrieveModel"
      produces:
      - "application/x-yaml"
      responses:
        "200":
          description: "model data as yaml"
          schema:
            $ref: '#/definitions/Model'
    delete:
      summary: "Reset model"
      description: "reset model in the repository to initial state"
      operationId: "ResetModel"
      responses:
        200:
          description: "success"
  /domain:
    get:
      summary: "List domains"
      description: "Retrieves list of domain names"
      operationId: "ListDomains"
      produces:
      - "application/x-yaml"
      responses:
        "200":
          description: "domain names as yaml"
          schema:
            $ref: '#/definitions/Names'
  /domain/{d}:
    post:
      summary: "Store domain"
      description: "create a new domain from yaml data and store it in the repository"
      operationId: "StoreDomain"
      consumes:
      - "application/x-yaml"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      - in: "body"
        name: "domain"
        description: "domain data as yaml"
        required: true
        schema:
          $ref: "#/definitions/Domain"
      responses:
        200:
          description: "Success"
    get:
      summary: "Retrieve domain"
      description: "retrieve domain from the repository as yaml data"
      operationId: "RetrieveDomain"
      parameters:
        - name: d
          in: path
          description: domain name
          type: string
          required: true
      produces:
      - "application/x-yaml"
      responses:
        200:
          description: "domain data as yaml"
          schema:
            $ref: '#/definitions/Domain'
        404:
          description: "domain not found"
    delete:
      summary: "Remove domain"
      description: "remove domain from the repository"
      operationId: "RemoveDomain"
      produces:
      - "application/x-yaml"
      parameters:
        - name: d
          in: path
          description: domain name
          type: string
          required: true
      responses:
        200:
          description: "Success"
        404:
          description: "domain not found"
  /domain/{d}/catalog:
    get:
      summary: "List components"
      description: "list all the available components in a domain"
      operationId: "ListComponents"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      produces:
      - "application/x-yaml"
      responses:
        "200":
          description: "component names as yaml"
          schema:
            $ref: '#/definitions/Names'
  /domain/{d}/catalog/{c}:
    get:
      summary: "List versions of a component template"
      description: "list all the available versions of a component in a domain"
      operationId: "ListComponentVersions"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      - name: c
        in: path
        description: component name
        type: string
        required: true
      produces:
      - "application/x-yaml"
      responses:
        "200":
          description: "version names as yaml"
          schema:
            $ref: '#/definitions/Names'
  /domain/{d}/catalog/{c}/version/{v}:
    post:
      summary: "Create component"
      description: "create a new component from yaml data and store it in the repository"
      operationId: "CreateComponent"
      consumes:
      - "application/x-yaml"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      - name: c
        in: path
        description: component name
        type: string
        required: true
      - name: v
        in: path
        description: version of component
        type: string
        required: true
      - in: "body"
        name: "component"
        description: "component data as yaml"
        required: true
        schema:
          $ref: "#/definitions/Component"
      responses:
        200:
          description: "Success"
    get:
      summary: "Retrieve component"
      description: "retrieve component from the repository as yaml data"
      operationId: "RetrieveComponent"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      - name: c
        in: path
        description: component name
        type: string
        required: true
      - name: v
        in: path
        description: version of component
        type: string
        required: true
      produces:
      - "application/x-yaml"
      responses:
        "200":
          description: "component data as yaml"
          schema:
            $ref: '#/definitions/Component'
    delete:
      summary: "Remove component"
      description: "remove component from the repository"
      operationId: "RemoveComponent"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      - name: c
        in: path
        description: component name
        type: string
        required: true
      - name: v
        in: path
        description: version of component
        type: string
        required: true
      responses:
        200:
          description: "success"
  /domain/{d}/architecture:
    get:
      summary: "List architectures"
      description: "list all the available architectures in a domain"
      operationId: "ListArchitectures"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      produces:
      - "application/x-yaml"
      responses:
        "200":
          description: "architecture names as yaml"
          schema:
            $ref: '#/definitions/Names'
  /domain/{d}/architecture/{a}:
    get:
      summary: "List architecture versions"
      description: "list all the available versions of an architecture in a domain"
      operationId: "ListArchitectureVersions"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      - name: a
        in: path
        description: architecture name
        type: string
        required: true
      produces:
      - "application/x-yaml"
      responses:
        "200":
          description: "version names as yaml"
          schema:
            $ref: '#/definitions/Names'
  /domain/{d}/architecture/{a}/version/{v}:
    post:
      summary: "Store architecture"
      description: "create a new architecture from yaml data and store it in the repository"
      operationId: "StoreArchitecture"
      consumes:
      - "application/x-yaml"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      - name: a
        in: path
        description: architecture name
        type: string
        required: true
      - name: v
        in: path
        description: version of architecture
        type: string
        required: true
      - in: "body"
        name: "architecture"
        description: "architecture data as yaml"
        required: true
        schema:
          $ref: "#/definitions/Architecture"
      responses:
        200:
          description: "Success"
    get:
      summary: "Retrieve architecture"
      description: "retrieve architecture from the repository as yaml data"
      operationId: "RetrieveArchitecture"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      - name: a
        in: path
        description: architecture name
        type: string
        required: true
      - name: v
        in: path
        description: version of architecture
        type: string
        required: true
      produces:
      - "application/x-yaml"
      responses:
        "200":
          description: "architecture data as yaml"
          schema:
            $ref: '#/definitions/Architecture'
    delete:
      summary: "Remove architecture"
      description: "remove architecture from the repository"
      operationId: "RemoveArchitecture"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      - name: a
        in: path
        description: architecture name
        type: string
        required: true
      - name: v
        in: path
        description: version of architecture
        type: string
        required: true
      responses:
        200:
          description: "success"
  /domain/{d}/solution:
    get:
      summary: "List solutions"
      description: "list all the available solutions in a domain"
      operationId: "ListSolutions"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      produces:
      - "application/x-yaml"
      responses:
        "200":
          description: "solution names as yaml"
          schema:
            $ref: '#/definitions/Names'
  /domain/{d}/solution/{s}:
    post:
      summary: "Store solution"
      description: "create a new solution from yaml data and store it in the repository"
      operationId: "StoreSolution"
      consumes:
      - "application/x-yaml"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      - name: s
        in: path
        description: solution name
        type: string
        required: true
      - in: "body"
        name: "solution"
        description: "solution data as yaml"
        required: true
        schema:
          $ref: "#/definitions/Solution"
      responses:
        200:
          description: "Success"
    get:
      summary: "Retrieve solution"
      description: "retrieve solution from the repository as yaml data"
      operationId: "RetrieveSolution"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      - name: s
        in: path
        description: solution name
        type: string
        required: true
      produces:
      - "application/x-yaml"
      responses:
        "200":
          description: "solution data as yaml"
          schema:
            $ref: '#/definitions/Solution'
    delete:
      summary: "Remove solution"
      description: "remove solution from the repository"
      operationId: "RemoveSolution"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      - name: s
        in: path
        description: solution name
        type: string
        required: true
      responses:
        200:
          description: "success"
  /domain/{d}/solution/{s}/version/{v}:
    put:
      summary: "Modify solution"
      description: " create a new solution or update an existing solution based on the information provided in an architecture blueprint"
      operationId: "ModifySolution"
      consumes:
      - "application/x-yaml"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      - name: s
        in: path
        description: solution name
        type: string
        required: true
      - name: v
        in: path
        description: version of the solution
        type: string
        required: true
      responses:
        200:
          description: "Success"
  /domain/{d}/solution/{s}/element:
    get:
      summary: "List elements"
      description: "list all the available elements in a solution"
      operationId: "ListElements"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      - name: s
        in: path
        description: solution name
        type: string
        required: true
      produces:
      - "application/x-yaml"
      responses:
        "200":
          description: "element names as yaml"
          schema:
            $ref: '#/definitions/Names'
  /domain/{d}/solution/{s}/element/{e}:
    get:
      summary: "Retrieve element"
      description: "retrieve element from the repository as yaml data"
      operationId: "RetrieveElement"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      - name: s
        in: path
        description: solution name
        type: string
        required: true
      - name: e
        in: path
        description: element name
        type: string
        required: true
      produces:
      - "application/x-yaml"
      responses:
        "200":
          description: "element data as yaml"
          schema:
            $ref: '#/definitions/Element'
    put:
      summary: "Modify element"
      description: "update an existing element based on the information provided in a configuration object"
      operationId: "ModifyElement"
      consumes:
      - "application/x-yaml"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      - name: s
        in: path
        description: solution name
        type: string
        required: true
      - name: e
        in: path
        description: element name
        type: string
        required: true
      - in: "body"
        name: "configuration"
        description: "configuration data as yaml"
        required: true
        schema:
          $ref: "#/definitions/Configuration"
      responses:
        "200":
          description: "Success"
  /domain/{d}/solution/{s}/element/{e}/cluster:
    get:
      summary: "List clusters"
      description: "list all the available clusters in an element"
      operationId: "ListClusters"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      - name: s
        in: path
        description: solution name
        type: string
        required: true
      - name: e
        in: path
        description: element name
        type: string
        required: true
      produces:
      - "application/x-yaml"
      responses:
        "200":
          description: "cluster names as yaml"
          schema:
            $ref: '#/definitions/Names'
  /domain/{d}/solution/{s}/element/{e}/cluster/{c}:
    get:
      summary: "Retrieve cluster"
      description: "retrieve cluster from the repository as yaml data"
      operationId: "RetrieveCluster"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      - name: s
        in: path
        description: solution name
        type: string
        required: true
      - name: e
        in: path
        description: element name
        type: string
        required: true
      - name: c
        in: path
        description: cluster name
        type: string
        required: true
      produces:
      - "application/x-yaml"
      responses:
        "200":
          description: "cluster data as yaml"
          schema:
            $ref: '#/definitions/Cluster'
    put:
      summary: "Modify cluster"
      description: "update an existing cluster based on the information provided in a configuration object"
      operationId: "ModifyCluster"
      consumes:
      - "application/x-yaml"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      - name: s
        in: path
        description: solution name
        type: string
        required: true
      - name: e
        in: path
        description: element name
        type: string
        required: true
      - name: c
        in: path
        description: cluster name
        type: string
        required: true
      - in: "body"
        name: "configuration"
        description: "configuration data as yaml"
        required: true
        schema:
          $ref: "#/definitions/Configuration"
      responses:
        "200":
          description: "Success"
  /domain/{d}/solution/{s}/element/{e}/cluster/{c}/instance:
    get:
      summary: "List instances"
      description: "list all the available instances in a cluster"
      operationId: "ListInstances"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      - name: s
        in: path
        description: solution name
        type: string
        required: true
      - name: e
        in: path
        description: element name
        type: string
        required: true
      - name: c
        in: path
        description: cluster name
        type: string
        required: true
      produces:
      - "application/x-yaml"
      responses:
        "200":
          description: "instance names as yaml"
          schema:
            $ref: '#/definitions/Names'
  /domain/{d}/solution/{s}/element/{e}/cluster/{c}/instance/{e}:
    get:
      summary: "Retrieve instance"
      description: "retrieve instance from the repository as yaml data"
      operationId: "RetrieveInstance"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      - name: s
        in: path
        description: solution name
        type: string
        required: true
      - name: e
        in: path
        description: element name
        type: string
        required: true
      - name: c
        in: path
        description: cluster name
        type: string
        required: true
      - name: i
        in: path
        description: instance name
        type: string
        required: true
      produces:
      - "application/x-yaml"
      responses:
        "200":
          description: "instance data as yaml"
          schema:
            $ref: '#/definitions/Instance'
    put:
      summary: "Modify instance"
      description: "update an existing instance based on the information provided in a configuration object"
      operationId: "ModifyInstance"
      consumes:
      - "application/x-yaml"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      - name: s
        in: path
        description: solution name
        type: string
        required: true
      - name: e
        in: path
        description: element name
        type: string
        required: true
      - name: c
        in: path
        description: cluster name
        type: string
        required: true
      - name: i
        in: path
        description: instance name
        type: string
        required: true
      - in: "body"
        name: "configuration"
        description: "configuration data as yaml"
        required: true
        schema:
          $ref: "#/definitions/Configuration"
      responses:
        "200":
          description: "Success"
  /domain/{d}/task:
    get:
      summary: "List tasks"
      description: "list all toplevel tasks in a domain (optionally matching a certain request ID)"
      operationId: "ListTasks"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      - name: r
        in: query
        description: request name
        type: string
        required: false
      produces:
      - "application/x-yaml"
      responses:
        "200":
          description: "task names as yaml"
          schema:
            $ref: '#/definitions/Names'
  /domain/{d}/task/{t}:
    get:
      summary: "Retrieve task"
      description: "retrieve task from the repository as yaml data"
      operationId: "RetrieveTask"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      - name: t
        in: path
        description: task name
        type: string
        required: true
      produces:
      - "application/x-yaml"
      responses:
        "200":
          description: "task data as yaml"
          schema:
            $ref: '#/definitions/Task'
    put:
      summary: "Terminate task"
      description: "stop a task in a domain"
      operationId: "TerminateTask"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      - name: t
        in: path
        description: task name
        type: string
        required: true
      responses:
        200:
          description: "Success"
  /domain/{d}/event:
    get:
      summary: "List events"
      description: "list all events related to a task in a domain"
      operationId: "ListEvents"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      - name: t
        in: query
        description: task name
        type: string
        required: true
      produces:
      - "application/x-yaml"
      responses:
        "200":
          description: "event names as yaml"
          schema:
            $ref: '#/definitions/Names'
  /domain/{d}/event/{e}:
    get:
      summary: "Retrieve event"
      description: "retrieve event from the repository as yaml data"
      operationId: "RetrieveEvent"
      parameters:
      - name: d
        in: path
        description: domain name
        type: string
        required: true
      - name: e
        in: path
        description: event name
        type: string
        required: true
      produces:
      - "application/x-yaml"
      responses:
        "200":
          description: "event data as yaml"
          schema:
            $ref: '#/definitions/Event'
definitions:
  Model:
    type: "object"
    description: "The information model for the orchestration of lifecycles"
    properties:
      Schema:
        type: "string"
        description: "Schema of the model"
      Name:
        type: "string"
        description: "Name of the model"
      Domains:
        type: "object"
        description: "Map of names to domains"
        additionalProperties:
          $ref: "#/definitions/Domain"
  Domain:
    type: "object"
    description: "An adminsitrative realm within a model"
    properties:
      Name:
        type: "string"
        description: "Name of the domain"
      Catalog:
        additionalProperties:
          $ref: "#/definitions/Component"
        description: "Map of names to templates for elements"
      Architectures:
        additionalProperties:
          $ref: "#/definitions/Architecture"
        description: "Map of names to architecture blueprints"
      Solutions:
        additionalProperties:
          $ref: "#/definitions/Solution"
        description: "Map of names to components"
      Task:
        additionalProperties:
          $ref: "#/definitions/Task"
        description: "Map of uuids to tasks"
      Event:
        additionalProperties:
          $ref: "#/definitions/Event"
        description: "Map of uuids to events"
  Component:
    type: "object"
    description: "A template for a version of a component"
    properties:
      Component:
        type: "string"
        description: "Name of the component"
      Version:
        type: "string"
        description: "Version of the component"
      Configuration:
        $ref: "#/definitions/Configuration"
      Dependencies:
        additionalProperties:
          $ref: "#/definitions/Dependency"
        description: "Map of names to dependencies of a component version"
  Dependency:
    type: "object"
    description: "A template for a component dependency"
    properties:
      Name:
        type: "string"
        description: "Name of the dependency"
      Type:
        type: "string"
        description: "Type of dependency (context/service)"
        enum: ["context", "service"]
      Component:
        type: "string"
        description: "Name of the referenced component"
      Version:
        type: "string"
        description: "Version of the referenced component"
      Configuration:
        $ref: "#/definitions/Configuration"
  Architecture:
    type: "object"
    description: "An configuration for a version of a solution"
    properties:
      Name:
        type: "string"
        description: "Name of the solution architecture"
      Version:
        type: "string"
        description: "Version of the solution architecture"
      Configuration:
        $ref: "#/definitions/Configuration"
      Elements:
        type: "object"
        description: "Map of component names to configurations for solution elements"
        additionalProperties:
          $ref: "#/definitions/ElementConfiguration"
  ElementConfiguration:
    type: "object"
    description: "A configuration for a solution element"
    properties:
      Name:
        type: "string"
        description: "Name of the solution element"
      Component:
        type: "string"
        description: "Name of the component template"
      Configuration:
        $ref: "#/definitions/Configuration"
      Versions:
        additionalProperties:
          $ref: "#/definitions/ClusterConfiguration"
        description: "Map of version names to configurations for versions of solution elements"
  ClusterConfiguration:
    type: "object"
    description: "A configuration for a cluster of solution elements"
    properties:
      Version:
        type: "string"
        description: "Version of a component template"
      State:
        type: "string"
        description: "Desired state of the version of a solution element"
      Size:
        type: "integer"
        description: "Desired size of the version of a solution element"
        minimum: 0
      Configuration:
        $ref: "#/definitions/Configuration"
      Dependencies:
        additionalProperties:
          $ref: "#/definitions/RelationshipConfiguration"
        description: "Map of dependency names to dependency configurations"
  RelationshipConfiguration:
    type: "object"
    description: "A configuration for a dependency of a version of a solution element"
    properties:
      Name:
        type: "string"
        description: "Name of the dependency"
      Configuration:
        $ref: "#/definitions/Configuration"
  Solution:
    type: "object"
    description: "A solution consisting of elements"
    properties:
      Name:
        type: "string"
        description: "Name of the solution"
      Configuration:
        $ref: "#/definitions/Configuration"
      Elements:
        type: "object"
        description: "Map of element names to elements"
        additionalProperties:
          $ref: "#/definitions/Element"
  Element:
    type: "object"
    description: "An element of a solution"
    properties:
      Name:
        type: "string"
        description: "Name of the element"
      Component:
        type: "string"
        description: "Name of the component"
      Configuration:
        $ref: "#/definitions/Configuration"
      Endpoint:
        $ref: "#/definitions/Endpoint"
      Clusters:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/Cluster"
        description: "Map of version names to clusters"
  Cluster:
    type: "object"
    description: "A cluster of instances of an element"
    properties:
      Version:
        type: "string"
        description: "Version of the instance"
      Configuration:
        $ref: "#/definitions/Configuration"
      Endpoint:
        $ref: "#/definitions/Endpoint"
      Relationships:
        type: "object"
        description: "Map of dependency names to dependencies"
        additionalProperties:
          $ref: "#/definitions/Relationship"
      Instances:
        type: "object"
        description: "Map of uuids to cluster element instances"
        additionalProperties:
          $ref: "#/definitions/Instance"
  Relationship:
    type: "object"
    description: "An instance of an element"
    properties:
      Name:
        type: "string"
        description: "Name of the dependency"
      Configuration:
        $ref: "#/definitions/Configuration"
      Endpoint:
        $ref: "#/definitions/Endpoint"
  Instance:
    type: "object"
    description: "An instance of an element"
    properties:
      UUID:
        type: "string"
        description: "Unique universal identifier of the instance"
      State:
        type: "string"
        description: "State of the instance"
      Configuration:
        $ref: "#/definitions/Configuration"
      Endpoint:
        $ref: "#/definitions/Endpoint"
  Configuration:
    type: "object"
    description: "Configuration information as structured object"
    additionalProperties: true
  Endpoint:
    type: "object"
    description: "Endpoint information as structured object"
    additionalProperties: true
  Names:
    type: "array"
    description: "List of names"
    items:
      type: "string"
  Task:
    type: "object"
    description: "An adminsitrative realm within a model"
    properties:
      Type:
        type: "string"
        description: "Type of the task"
      Domain:
        type: "string"
        description: "Name of the Domain"
      Solution:
        type: "string"
        description: "Name of the Solution"
      Element:
        type: "string"
        description: "Name of the element"
      Cluster:
        type: "string"
        description: "Cluster (version) of the element"
      Instance:
        type: "string"
        description: "Univesal unique identifier of the instance"
      State:
        type: "string"
        description: "Desired state for the entity"
      UUID:
        type: "string"
        description: "Univesal unique identifier of the task"
      Parent:
        type: "string"
        description: "Univesal unique identifier of the parent task"
      Status:
        type: "string"
        description: "Execution status of the task"
        enum: ["execution","completion","failure","timeout"]
      Phase:
        type: "string"
        description: "Execution phase of the task"
      Subtasks:
        type: "array"
        description: "Unique universal identifiers of the subtasks"
        items:
          type: "string"
  Event:
    type: "object"
    description: "An event related to a task"
    properties:
      Domain:
        type: "string"
        description: "Name of the domain"
      UUID:
        type: "string"
        description: "Univesal unique identifier of the event"
      Task:
        type: "string"
        description: "Univesal unique identifier of the task"
      Type:
        type: "string"
        description: "Type of the event"
        enum: ["execution","completion","failure","timeout"]
      Source:
        type: "string"
        description: "Univesal unique identifier of the issuing task or ''"
      Time:
        type: "string"
        description: "time since 1.1.1970 in nsecs"
externalDocs:
  description: "Orchestration"
  url: "http://tsai.eu"
